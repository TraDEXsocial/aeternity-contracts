contract AEX9 =
  entrypoint total_supply : () => int
  entrypoint balance : (address) => option(int)
  entrypoint transfer : (address, int) => ()
  entrypoint transfer_allowance : (address, address, int) => ()
  entrypoint allowance_for_caller : (address) => option(int)
  entrypoint create_allowance : (address, int) => ()
  entrypoint change_allowance : (address, int) => ()
  entrypoint mint : (address, int) => ()
  entrypoint burn : (int) => ()

contract TradexExchange =
  record state = {
    owner : address,
    exchange_rate_for_ae : int,
    exchange_rate_for_token : map(AEX9, int),
    balances : map(address, int)}
  
  /*
  * @dev - Initializing function / constructor
  * @param _exchange_rate_for_ae : int - The intial exchange rate for AE
  * @param _exchange_rate_for_token : int - The intial exchange rate for tokens
  */
  stateful entrypoint init(_exchange_rate_for_ae : int) = {
    owner = Call.caller,
    exchange_rate_for_ae = _exchange_rate_for_ae,
    exchange_rate_for_token = {},
    balances = {}}

  // EVENTS
  datatype event = 
    LogTokensAmountSwap(indexed int, indexed int, indexed int) 
    | LogTokensAddressSwap(indexed address, indexed address) 
    | LogLiquidityAdd(indexed address, indexed int) 
    | LogLiquidityGet(indexed address, indexed int)

  /*
  * @dev - Function to check the contract balance for user address
  * @param who : int - Тhe address of the user
  */    
  entrypoint balance(who: address) : int = 
    lookup_by_address(who, state.balances, 0)

  /*
  * @dev - Function for updating the exchange rate of АЕ, only the owner of the contract can do the operation
  * @param _exchange_rate_for_ae : int - Тhe exchange rate of AE with which the owner will update the rate
  */
  stateful entrypoint update_exchange_rate_for_ae(_exchange_rate_for_ae : int) = 
    only_owner()
    put(state { exchange_rate_for_ae = _exchange_rate_for_ae })

  /*
  * @dev - Function to check the current exchange rate of AE tokens
  */  
  entrypoint get_exchange_rate_for_ae() : int =
    state.exchange_rate_for_ae

  /*
  * @dev - Function for updating the exchange rate of given token, only the owner of the contract can do the operation
  * @param _exchange_rate_for_token : int - The exchange rate of tokens with which the owner will update the rate
  * @param token_address : address - The address of token whose rate will be updated
  */
  stateful entrypoint update_exchange_rate_for_token(token_address : AEX9, _exchange_rate_for_token : int) = 
    only_owner()
    put(state { exchange_rate_for_token[token_address] = _exchange_rate_for_token })

  /*
  * @dev - Function to check the current exchange rate of given token
  * @param token_address : address - The address of token whose rate will be checked
  */  
  entrypoint get_exchange_rate_for_token(token_address : AEX9) : int =
    state.exchange_rate_for_token[token_address]

  /*
  * @dev - Function to check the balance of AE tokens for given address
  * @param who : int - The address of the user
  */   
  entrypoint get_balance(who : address) : int = 
    Chain.balance(who)

  /*
  * @dev - Function to check the balance of given token for user address
  * @param who : int - The address of the user
  * @param token : int - The token address
  */     
  entrypoint get_token_balance(who : address, token : AEX9) : option(int) =
    token.balance(who)

  /*
  * @dev - Function to add AE tokens from the pool wallet (the address which calls the function) to the contract to provide liquidity
  */  
  stateful entrypoint add_liquidity() = 
    let liquidity_provider : address = Call.caller

    let amount = Call.value
    
    require(amount > 0, "INVALID_POOL_WALLET_AMOUNT")

    put(state{ balances[liquidity_provider] = balance(liquidity_provider) + amount })
    
    Chain.event(LogLiquidityAdd(liquidity_provider, amount))

  /*
  * @dev - Function to get back the AE tokens from the contact to pool wallet (the address which calls the function)
  */
  stateful entrypoint get_liquidity() =
    let liquidity_provider : address = Call.caller

    let ae = state.balances[liquidity_provider]
      
    require(ae > 0, "INVALID_LIQUIDITY_PROVIDER")

    Chain.spend(liquidity_provider, ae)
    
    Chain.event(LogLiquidityGet(liquidity_provider, ae))

  /*
  * @dev - Function to swap tokens for AE 
  * @param tokens_in_amount : int - The amount of tokens which the user want to swap
  * @param pool_wallet : address - The address where the tokens should go - liquidity_provider
  * @param token_in_address : AEX9 - The address of the token which the user is going to swap
  */
  stateful entrypoint swap_for_ae(
    tokens_in_amount : int,
    pool_wallet : address,
    token_in_address : AEX9) =

    let user_wallet : address = Call.caller 
    
    token_in_address.transfer_allowance(user_wallet, pool_wallet, tokens_in_amount)

    let ae_out : int = tokens_in_amount / get_exchange_rate_for_ae()
    
    Chain.spend(user_wallet, ae_out)

    Chain.event(LogTokensAmountSwap(balance(pool_wallet), tokens_in_amount, get_exchange_rate_for_ae()))
    Chain.event(LogTokensAddressSwap(user_wallet, pool_wallet))

  /*
  * @dev - Function to swap tokens for tokens 
  * @param tokens_in_amount : int - The amount of tokens which the user want to swap
  * @param pool_wallet : address - The address where the tokens should go - liquidity_provider
  * @param token_in_address : AEX9 - The address of the token which the user is going to swap
  * @param token_out_address : AEX9 - The address of the token which the user is going to receive
  */
  stateful entrypoint swap_for_tokens(
    tokens_in_amount : int,
    pool_wallet : address,
    token_in_address : AEX9,
    token_out_address : AEX9)  = 
    
    let user_wallet : address = Call.caller

    token_in_address.transfer_allowance(user_wallet, pool_wallet, tokens_in_amount)

    require(get_exchange_rate_for_token(token_out_address) > 0, "NO_RATE_FOR_TOKEN")
    
    let tokens_out : int = tokens_in_amount / get_exchange_rate_for_token(token_out_address)

    token_out_address.transfer_allowance(pool_wallet, user_wallet, tokens_out)
  
    //Chain.event(LogTokensAmountSwap(balance(pool_wallet), tokens_out, get_exchange_rate_for_token(token_out_address)))
    Chain.event(LogTokensAddressSwap(user_wallet, pool_wallet))
    
  /*
  * @dev - Internal helper function used as modifier for checking if the caller is the owner
  */
  function only_owner() =
    require(Call.caller == state.owner, "Only the owner is allowed!")

  function lookup_by_address(k : address, m, v) =
  	switch(Map.lookup(k, m))
	    None    => v
	    Some(x) => x